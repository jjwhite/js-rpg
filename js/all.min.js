var TopDownGame=TopDownGame||{};TopDownGame.Boot=function(){},TopDownGame.Boot.prototype={preload:function(){this.load.image("preloadbar","assets/images/preloader-bar.png")},create:function(){this.game.stage.backgroundColor="#fff",this.scale.scaleMode=Phaser.ScaleManager.SHOW_ALL,this.scale.pageAlignHorizontally=!0,this.scale.pageAlignVertically=!0,this.game.physics.startSystem(Phaser.Physics.ARCADE),this.state.start("Preload")}};
var TopDownGame=TopDownGame||{};TopDownGame.Game=function(){},TopDownGame.Game.prototype={create:function(){this.map=this.game.add.tilemap("level1"),this.map.addTilesetImage("tiles","gameTiles"),this.backgroundlayer=this.map.createLayer("backgroundLayer"),this.blockedLayer=this.map.createLayer("blockedLayer"),this.map.setCollisionBetween(1,2e3,!0,"blockedLayer"),this.backgroundlayer.resizeWorld(),this.createItems(),this.createDoors();var e=this.findObjectsByType("playerStart",this.map,"objectsLayer");this.player=this.game.add.sprite(e[0].x,e[0].y,"player"),this.game.physics.arcade.enable(this.player),this.game.camera.follow(this.player),this.cursors=this.game.input.keyboard.createCursorKeys()},createItems:function(){this.items=this.game.add.group(),this.items.enableBody=!0;result=this.findObjectsByType("item",this.map,"objectsLayer"),result.forEach(function(e){this.createFromTiledObject(e,this.items)},this)},createDoors:function(){this.doors=this.game.add.group(),this.doors.enableBody=!0,result=this.findObjectsByType("door",this.map,"objectsLayer"),result.forEach(function(e){this.createFromTiledObject(e,this.doors)},this)},findObjectsByType:function(e,t,s){var i=new Array;return t.objects[s].forEach(function(s){s.properties.type===e&&(s.y-=t.tileHeight,i.push(s))}),i},createFromTiledObject:function(e,t){var s=t.create(e.x,e.y,e.properties.sprite);Object.keys(e.properties).forEach(function(t){s[t]=e.properties[t]})},update:function(){this.game.physics.arcade.collide(this.player,this.blockedLayer),this.game.physics.arcade.overlap(this.player,this.items,this.collect,null,this),this.game.physics.arcade.overlap(this.player,this.doors,this.enterDoor,null,this),this.player.body.velocity.x=0,this.cursors.up.isDown?0==this.player.body.velocity.y&&(this.player.body.velocity.y-=50):this.cursors.down.isDown?0==this.player.body.velocity.y&&(this.player.body.velocity.y+=50):this.player.body.velocity.y=0,this.cursors.left.isDown?this.player.body.velocity.x-=50:this.cursors.right.isDown&&(this.player.body.velocity.x+=50)},collect:function(e,t){console.log("yummy!"),t.destroy()},enterDoor:function(e,t){console.log("entering door that will take you to "+t.targetTilemap+" on x:"+t.targetX+" and y:"+t.targetY)}};
var TopDownGame=TopDownGame||{};TopDownGame.game=new Phaser.Game(160,160,Phaser.AUTO,""),TopDownGame.game.state.add("Boot",TopDownGame.Boot),TopDownGame.game.state.add("Preload",TopDownGame.Preload),TopDownGame.game.state.add("Game",TopDownGame.Game),TopDownGame.game.state.start("Boot");
var TopDownGame=TopDownGame||{};TopDownGame.Preload=function(){},TopDownGame.Preload.prototype={preload:function(){this.preloadBar=this.add.sprite(this.game.world.centerX,this.game.world.centerY,"preloadbar"),this.preloadBar.anchor.setTo(.5),this.load.setPreloadSprite(this.preloadBar),this.load.tilemap("level1","assets/tilemaps/level1.json",null,Phaser.Tilemap.TILED_JSON),this.load.image("gameTiles","assets/images/tiles.png"),this.load.image("greencup","assets/images/greencup.png"),this.load.image("bluecup","assets/images/bluecup.png"),this.load.image("player","assets/images/player.png"),this.load.image("browndoor","assets/images/browndoor.png")},create:function(){this.state.start("Game")}};
Rpg.Character=function(e,a){var r={Name:e,Type:a,AddWeapon:function(e){this.Weapon=e}};return r},Rpg.Character.Type={Hero:0,Neutral:1,Enemy:2};
Rpg.Weapon=function(e,a,o,n){var r={Name:e,Type:a,Damage:null!==o?o:1,Weight:null!==n?n:1};return r},Rpg.Weapon.Type={Barehand:0,Dagger:1,ShortSword:2,LongSword:3,Axe:4,Bow:5,Staff:6,Throwable:7,Explosive:8};
"use strict";describe("Weapons component",function(){var e=new Rpg.Weapon("test",0,10,10);it("is named test",function(){expect(e.name).toEqual("test")})});